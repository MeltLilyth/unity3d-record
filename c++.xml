c++语言：支持过程化编程，面相对象编程，泛型编程

过程化编程：所谓的面相过程编程，注重过程，注重函数调用，
面相对象编程：封装，继承，多态(c++是所有语言中唯一支持多继承的的语言)

<!-- c++中基本的数据类型 -->
1.c++中基本的数据类型：
	int bool float double char void wchar_t[宽字符类型]

	wchar_t:宽字符类型。宽字符的使用方式和char的使用类型相同，不同的是存储数据的方式。(char存储一个字符只需要一个字节，
			而wchar_t存储一个字符需要使用两个字节或者四个字节的大小)


	宽字符类型和窄字符类型的区别：
		宽字符类型用>=两个字节的大小表示一个字符：窄字符类型用1个字节的大小表示一个字符
		
	一个类型可以使用一个或者多个类型修饰符进行修饰：long int; unsigned short int; 


	typedef:同c语言中的typedef [typedef type newName] 
		例 :
		typedef int demo;   
		主函数中写
		demo i = 1;【编译可通过】

2.关于修饰符类型
	signed unsigned long short

	c++中的限定字符类型
	unsigned(不带标识) signed(带标识) 

	例如：
	unsigned int a ;                          signed int a ;
	int b = -1;                               int b = -1;
	a = b;                                    a = b;
	cout << a << endl; -- 输出为1              cout << a << endl; -- 输出为-1 


3.c++中的可存储类：static,extren,mutable

<!-- c++中 类与对象 -->
	1.定义相关同其他语言
	2.关于c++中类的声明：不同于其他高级语言需要new一个对象。c++只需要在使用的地方直接定义即可(不论是局部还是全局)

	c++中支持在类内部进行声明，在类外部进行实现[注意：前提是为public类型]

	class Demo(){
		public:
		int GetNum(void);
	}

	int Demo::GetNum(void){
		return 1; 
	}

	
<!-- 杂项 -->
<!-- 1.c++中的引用问题： -->
	#include <string> : 引用的是编译器类库中的头文件
	#include "string" : 引用的是当前工程目录下的头文件 

<!-- 2.end和endl的区别: -->
	相当于java中的print和println的区别

<!-- 3.c++中的namespace： -->
	用于区分额外的类，函数，变量等等；
	案例：
	namespace Test{
		class D{
		public:
			int i = 1;
		}
	}

	在主函数所在的文件中需要引用：
		using namespace Test;
<!-- 4.c++中的:与:: -->
 1.关于 :: -- 标识作用域操作符
 	(1).类作用域操作符：表示变量或函数所属的类 例如：Test::Clear() [表示Clear()是类Test的成员函数,注意一下只适用于类中的公有对象和保护对象]
 	(2).表示作用域操作符：在没有生命类或者对象时，可以写成： void Test::GetInstance(){//方法体}
 	(3).表示引用成员函数或者类变量，例如System::Math::Sqrt() <=> System.Math.Sqrt()

 2.关于 : --
 	(1).表示某个变量占用的空间数量 例如:char a:4;[表示char类型变量a占用4个字节的存储空间]
 	(2).构造函数后添加表示为初始化表达式
 	(3).定义继承：例如 class A:B{} [类A继承于类B]
 	(4).定义类中函数或者变量的类型：
 		例如：
 		class A{
 			public:
 				//定义公有类型的变量或者方法
 			private:
 				//定义私有类型的变量或者方法
 			protected:
 				//定义保护类型的变量或者方法
 		}

<!-- 5.关于const，extern，static,mutiable -->
static类型：同其他面向对象语言的static类型。需要在程序运行期间一直存储于堆内存的局部变量一般使用static进行修饰。
	tips：c++中也有单独的静态存储区，但是为了使用更加方便

const类型：被const修饰的对象一般需要初始化，并且一旦初始化之后就不能够被更改

extern类型：用于提供一个全局变量的引用，改变量对于所有作用域都是可见的(不论是否处于同一个namespace下)[尤其注意一下使用前提是该变量或者函数必须是全局类型的]
	使用extern修饰变量时，对于没有初始化的变量，会将其指向之前已经定义过的位置

<!-- 6.new关键字 -->
<!-- 1.基本讲解： -->
	c++使用关键字new创建对象，但是通过new创建出来的对象，需要在使用结束之后使用delete关键字进行删除

	相当于在c++中，new一个对象等同于为这个对象开辟一个空间并将空间地址赋给对应类型的指针

	c++有两种创建对象的方式：在函数体中通过局部变量的方式进行直接定义;或者是通过new进行创建

	两种创建对象的不同之处：
	1.通过将对象创建成局部变量，接受类型为相应类型的变量，并且保存于栈内存中；通过关键字new创建出来的对象，接受类型为对应类型的指针，且创建出来之后保存于堆内存中。
	2.普通定义创建的对象不需要通过delete关键字在程序中进行删除；通过关键字new创建的对象需要通过delete方法删除。(不删除会导致内存泄漏?)
	3.普通定义的对象由操作系统进行管理，new关键字创建的对象由开发者进行管理
	4.tips：频繁的使用某一个类型的对象时，不建议通过new关键字创建对象

	使用案例 -- 与其他面向对象语言不同(意义或许一样)：
		<!-- 使用new创建的对象 -->
		User *user = new User();
		<!-- 不使用new创建的对象 -->
		User user;  <=> User user = User();
<!-- 引申问题 - 关于c++使用new创建对象时候是否使用括号的问题 -->




<!-- 程序练习时出现的错误 -->
1.关于expected unqualified-id 

具体的描述信息如下：
F:\冷笑の游里\c++\Meltlilyth\main.cpp|7|error: expected unqualified-id before 'private'

一般出现该项错误的原因在于出现了不该出现的关键字，新手比较常出现的错误。
